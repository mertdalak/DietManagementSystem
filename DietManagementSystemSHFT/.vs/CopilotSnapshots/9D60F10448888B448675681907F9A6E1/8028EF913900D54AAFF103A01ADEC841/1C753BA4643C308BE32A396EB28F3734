using FluentValidation;
using MediatR;
using DietManagementSystemSHFT.API.Models.ResponseModels;

namespace DietManagementSystemSHFT.CQRS.Behaviors
{
    public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>
        where TRequest : IRequest<TResponse>
        where TResponse : class
    {
        private readonly IEnumerable<IValidator<TRequest>> _validators;

        public ValidationBehavior(IEnumerable<IValidator<TRequest>> validators)
        {
            _validators = validators;
        }

        public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
        {
            if (!_validators.Any())
            {
                return await next();
            }

            var context = new ValidationContext<TRequest>(request);
            var validationResults = await Task.WhenAll(_validators.Select(v => v.ValidateAsync(context, cancellationToken)));
            var failures = validationResults.SelectMany(r => r.Errors).Where(f => f != null).ToList();

            if (failures.Count != 0)
            {
                // If the response is a BaseResponseModel or derived from it, we can use it to return validation errors
                if (typeof(BaseResponseModel).IsAssignableFrom(typeof(TResponse)))
                {
                    var response = Activator.CreateInstance(typeof(TResponse)) as BaseResponseModel;
                    if (response != null)
                    {
                        response.IsSuccess = false;
                        response.Message = string.Join(", ", failures.Select(x => x.ErrorMessage));
                        return response as TResponse;
                    }
                }

                throw new ValidationException(failures);
            }

            return await next();
        }
    }
}