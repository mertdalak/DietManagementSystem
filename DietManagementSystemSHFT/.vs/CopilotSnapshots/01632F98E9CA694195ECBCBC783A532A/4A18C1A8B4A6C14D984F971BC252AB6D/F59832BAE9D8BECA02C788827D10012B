using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using DietManagementSystemSHFT.Models.RequestModels;
using DietManagementSystem.Data.Enums;
using DietManagementSystemSHFT.API.CQRS.Commands.ClientCommands;
using DietManagementSystemSHFT.API.CQRS.Queries.ClientQueries;
using DietManagementSystemSHFT.API.CQRS.Queries.DietitanQueries;

namespace DietManagementSystemSHFT.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class ClientController : ControllerBase
    {
        private readonly IMediator _mediator;

        public ClientController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpPost]
        [Authorize(Roles = "Admin,Dietitian")]
        public async Task<IActionResult> Create([FromBody] ClientRequestModel request)
        {
            // If dietitian is creating a client, use their ID
            if (User.FindFirstValue("role") == Role.Dietitian.ToString())
            {
                var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                {
                    return Unauthorized();
                }

                // Get the dietitian's ID from their user ID
                var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
                var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
                
                if (dietitian == null)
                {
                    return BadRequest("No dietitian profile found for this user");
                }

                // Override the dietitian ID in the request
                request.DietitianId = dietitian.Id;
            }

            var command = CreateClientCommand.FromRequest(request);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "Admin,Dietitian")]
        public async Task<IActionResult> Update(Guid id, [FromBody] ClientRequestModel request)
        {
            // Check if user is admin or the dietitian responsible for this client
            var userRole = User.FindFirstValue("role");
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            // Get the client to check permissions
            var clientToCheck = await _mediator.Send(new GetClientByIdQuery(id));
            if (clientToCheck == null)
            {
                return NotFound("Client not found");
            }

            if (userRole == Role.Dietitian.ToString())
            {
                // Get the dietitian's ID from their user ID
                var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
                var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
                
                if (dietitian == null || dietitian.Id != clientToCheck.DietitianId)
                {
                    return Forbid();
                }

                // Override the dietitian ID to ensure it doesn't change
                request.DietitianId = dietitian.Id;
            }

            var command = UpdateClientCommand.FromRequest(id, request);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin,Dietitian")]
        public async Task<IActionResult> Delete(Guid id)
        {
            // Check if user is admin or the dietitian responsible for this client
            var userRole = User.FindFirstValue("role");
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            // Get the client to check permissions
            var clientToCheck = await _mediator.Send(new GetClientByIdQuery(id));
            if (clientToCheck == null)
            {
                return NotFound("Client not found");
            }

            if (userRole == Role.Dietitian.ToString())
            {
                // Get the dietitian's ID from their user ID
                var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
                var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
                
                if (dietitian == null || dietitian.Id != clientToCheck.DietitianId)
                {
                    return Forbid();
                }
            }

            var command = new DeleteClientCommand(id);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "Admin,Dietitian")]
        public async Task<IActionResult> GetById(Guid id)
        {
            // Check if user is admin or the dietitian responsible for this client
            var userRole = User.FindFirstValue("role");
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            // Get the client to check permissions
            var client = await _mediator.Send(new GetClientByIdQuery(id));
            if (client == null)
            {
                return NotFound("Client not found");
            }

            if (userRole == Role.Dietitian.ToString())
            {
                // Get the dietitian's ID from their user ID
                var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
                var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
                
                if (dietitian == null || dietitian.Id != client.DietitianId)
                {
                    return Forbid();
                }
            }

            return Ok(client);
        }

        [HttpGet]
        [Authorize(Roles = "Admin,Dietitian")]
        public async Task<IActionResult> GetAll()
        {
            var userRole = User.FindFirstValue("role");
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            var clients = await _mediator.Send(new GetAllClientsQuery());

            // If the user is a dietitian, only return their clients
            if (userRole == Role.Dietitian.ToString())
            {
                // Get the dietitian's ID from their user ID
                var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
                var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
                
                if (dietitian == null)
                {
                    return NotFound("No dietitian profile found for this user");
                }

                clients = clients.Where(c => c.DietitianId == dietitian.Id).ToList();
            }

            return Ok(clients);
        }
    }
}