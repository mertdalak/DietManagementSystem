using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using DietManagementSystemSHFT.Models.RequestModels;
using DietManagementSystem.Data.Enums;
using DietManagementSystemSHFT.API.CQRS.Commands.DietitianCommands;
using DietManagementSystemSHFT.API.CQRS.Queries.DietitanQueries;

namespace DietManagementSystemSHFT.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class DietitianController : ControllerBase
    {
        private readonly IMediator _mediator;

        public DietitianController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Create([FromBody] DietitianRequestModel request)
        {
            var command = CreateDietitianCommand.FromRequest(request);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Update(Guid id, [FromBody] DietitianRequestModel request)
        {
            var command = UpdateDietitianCommand.FromRequest(id, request);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(Guid id)
        {
            var command = new DeleteDietitianCommand(id);
            var result = await _mediator.Send(command);

            if (!result.IsSuccess)
                return BadRequest(result);

            return Ok(result);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(Guid id)
        {
            // Check if user is admin or the dietitian themselves
            var userRole = User.FindFirstValue("role");
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            // Get the dietitian record to check if the user is the owner
            var dietitianToCheck = await _mediator.Send(new GetDietitianByIdQuery(id));
            
            // If not admin and not the owner, return unauthorized
            if (userRole != Role.Admin.ToString() && dietitianToCheck?.UserId != userId)
            {
                return Forbid();
            }

            var dietitian = await _mediator.Send(new GetDietitianByIdQuery(id));
            if (dietitian == null)
                return NotFound();

            return Ok(dietitian);
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetAll()
        {
            var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
            return Ok(dietitians);
        }

        [HttpGet("profile")]
        [Authorize(Roles = "Dietitian")]
        public async Task<IActionResult> GetOwnProfile()
        {
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized();
            }

            // Query the database to find the dietitian profile for this user
            var dietitians = await _mediator.Send(new GetAllDietitiansQuery());
            var dietitian = dietitians.FirstOrDefault(d => d.UserId == userId);
            
            if (dietitian == null)
                return NotFound("No dietitian profile found for this user");

            return Ok(dietitian);
        }
    }
}}